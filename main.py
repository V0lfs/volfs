from email.headerregistry import Address
from dadata import Dadata
import config
import logging
import re
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ContentType, ReplyKeyboardMarkup, KeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot)

# –¶–µ–Ω—ã
PRICES = {
    "–ü–∏—Ü—Ü–∞ –ü–µ–ø–ø–µ—Ä–æ–Ω–∏": types.LabeledPrice(label="–ü–∏—Ü—Ü–∞ –ü–µ–ø–ø–µ—Ä–æ–Ω–∏", amount=8000),  # 80 —Ä—É–±–ª–µ–π
    "–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞": types.LabeledPrice(label="–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞", amount=7000),  # 70 —Ä—É–±–ª–µ–π
    "–ü–∏—Ü—Ü–∞ –ì–∞–≤–∞–π—Å–∫–∞—è": types.LabeledPrice(label="–ü–∏—Ü—Ü–∞ –ì–∞–≤–∞–π—Å–∫–∞—è", amount=7500),  # 75 —Ä—É–±–ª–µ–π
    "–ö–æ–∫–∞-–ö–æ–ª–∞": types.LabeledPrice(label="–ö–æ–∫–∞-–ö–æ–ª–∞", amount=1500),  # 15 —Ä—É–±–ª–µ–π
    "–ß–∏–∑–±—É—Ä–≥–µ—Ä": types.LabeledPrice(label="–ß–∏–∑–±—É—Ä–≥–µ—Ä", amount=5000),  # 50 —Ä—É–±–ª–µ–π
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
messages_to_delete = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
main_keyboard.add(
    KeyboardButton("–ú–µ–Ω—é"), KeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞"),
    KeyboardButton("–û –Ω–∞—Å"), KeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã"),
    KeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞"), KeyboardButton("–û—Ç–∑—ã–≤"),
    KeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ (–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"),
    KeyboardButton("–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ (–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
)

# –ú–µ–Ω—é —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
menu_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
menu_keyboard.add(
    KeyboardButton("–ü–∏—Ü—Ü–∞ –ü–µ–ø–ø–µ—Ä–æ–Ω–∏"), KeyboardButton("–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞"),
    KeyboardButton("–ü–∏—Ü—Ü–∞ –ì–∞–≤–∞–π—Å–∫–∞—è"), KeyboardButton("–ö–æ–∫–∞-–ö–æ–ª–∞"),
    KeyboardButton("–ß–∏–∑–±—É—Ä–≥–µ—Ä"), KeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞"),
    KeyboardButton("–ù–∞–∑–∞–¥")
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
back_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–ù–∞–∑–∞–¥"))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥—Ä–µ—Å–∞
def is_valid_address(address):
    pattern = r'–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥.*'
    return re.match(pattern, address, re.IGNORECASE) is not None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def is_valid_phone(phone):
    return re.match(r'^\+7\d{10}$|^8\d{10}$', phone) is not None and len(phone) in [11, 12]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_states[message.chat.id] = {"step": 0, "cart": {}, "address": None, "phone": None, "comment": None}
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –ø–∏—Ü—Ü–µ—Ä–∏—é! üéâ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"
@dp.message_handler(lambda message: message.text == "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ (–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
async def about_command(message: types.Message):
    about_text = (
        "–î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –ø–æ–∫–∞ —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. \n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    )
    await message.answer(about_text, reply_markup=back_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é"
@dp.message_handler(lambda message: message.text == "–ú–µ–Ω—é")
async def show_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:", reply_markup=menu_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û –Ω–∞—Å"
@dp.message_handler(lambda message: message.text == "–û –Ω–∞—Å")
async def about_command(message: types.Message):
    about_text = (
        "üçï –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –ø–∏—Ü—Ü–µ—Ä–∏—é!\n\n"
        "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∞–º—ã–µ –≤–∫—É—Å–Ω—ã–µ –ø–∏—Ü—Ü—ã –∏ –Ω–∞–ø–∏—Ç–∫–∏. –ó–∞–∫–∞–∂–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å!"
    )
    await message.answer(about_text, reply_markup=back_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–æ–Ω—Ç–∞–∫—Ç—ã"
@dp.message_handler(lambda message: message.text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contact_command(message: types.Message):
    await message.answer("–ù–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω: +7 (996) 186-89-91\n–ù–∞—à —Ç–≥: @volfs_volfs", reply_markup=back_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
@dp.message_handler(lambda message: message.text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_command(message: types.Message):
    await message.answer("–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞ @volfs_volfs.", reply_markup=back_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–∑—ã–≤"
@dp.message_handler(lambda message: message.text == "–û—Ç–∑—ã–≤")
async def feedback_command(message: types.Message):
    if message.chat.id not in user_states:
        user_states[message.chat.id] = {"step": 0, "cart": {}, "address": None, "phone": None, "comment": None}

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=back_keyboard)
    user_states[message.chat.id]["waiting_for_feedback"] = True

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ—Ç–∑—ã–≤–∞
@dp.message_handler(lambda message: message.chat.id in user_states and user_states[message.chat.id].get("waiting_for_feedback", False))
async def process_feedback(message: types.Message):
    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)
        user_states[message.chat.id]["waiting_for_feedback"] = False
        return

    feedback = message.text
    await bot.send_message(config.CHAT, f"–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç {message.from_user.full_name}:\n{feedback}")
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!", reply_markup=main_keyboard)
    user_states[message.chat.id]["waiting_for_feedback"] = False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤"
@dp.message_handler(lambda message: message.text == "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ (–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
async def order_history(message: types.Message):
    await message.answer("–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", reply_markup=back_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.message_handler(lambda message: message.text == "–ù–∞–∑–∞–¥")
async def handle_back(message: types.Message):
    chat_id = message.chat.id
    if chat_id in user_states:
        step = user_states[chat_id].get("step", 0)
        if step == 1:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏–ª –∞–¥—Ä–µ—Å
            await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:", reply_markup=menu_keyboard)
            user_states[chat_id]["step"] = 0
        elif step == 2:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏–ª —Ç–µ–ª–µ—Ñ–æ–Ω
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å (–ø—Ä–∏–º–µ—Ä: –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, —É–ª 8 –º–∞—Ä—Ç–∞ 12, 2 –ø–æ–¥—ä–µ–∑–¥, –∫–≤ 48):", reply_markup=back_keyboard)
            user_states[chat_id]["step"] = 1
        elif step == 3:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–ª –∑–∞–∫–∞–∑
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø—Ä–∏–º–µ—Ä: +79012345678 –∏–ª–∏ 89012345678):", reply_markup=back_keyboard)
            user_states[chat_id]["step"] = 2
        elif step == 4:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            await message.answer("–ñ–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–∫–∞–∑—É?):", reply_markup=back_keyboard)
            user_states[chat_id]["step"] = 3
        else:
            await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)
    else:
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
@dp.message_handler(lambda message: message.text in PRICES.keys())
async def process_product_order(message: types.Message):
    if message.chat.id not in user_states:
        user_states[message.chat.id] = {"step": 0, "cart": {}, "address": None, "phone": None, "comment": None}
        
    product = message.text
    user_states[message.chat.id]["cart"][product] = user_states[message.chat.id]["cart"].get(product, 0) + 1
    await message.answer(f"–í—ã –¥–æ–±–∞–≤–∏–ª–∏ {product} –≤ –∫–æ—Ä–∑–∏–Ω—É. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–æ—Ä–∑–∏–Ω—É.", reply_markup=menu_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–æ—Ä–∑–∏–Ω–∞"
@dp.message_handler(lambda message: message.text == "–ö–æ—Ä–∑–∏–Ω–∞" and message.chat.id in user_states)
async def view_cart(message: types.Message):
    cart = user_states[message.chat.id]["cart"]
    if not cart:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ –∫–æ—Ä–∑–∏–Ω—É.", reply_markup=back_keyboard)
        return

    cart_message = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
    total_amount = 0
    for product, quantity in cart.items():
        price = PRICES[product].amount / 100  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ä—É–±–ª—è–º
        cart_message += f"{product} - {quantity} —à—Ç. –ø–æ {price} —Ä—É–±–ª–µ–π\n"
        total_amount += price * quantity

    cart_message += f"\n–ò—Ç–æ–≥–æ: {total_amount} —Ä—É–±–ª–µ–π\n\n–•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É?"
    await message.answer(cart_message, reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"), KeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"), KeyboardButton("–ù–∞–∑–∞–¥")))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"
@dp.message_handler(lambda message: message.text == "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É" and message.chat.id in user_states)
async def clear_cart_confirmation(message: types.Message):
    await message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É?", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç")))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
@dp.message_handler(lambda message: message.text == "–î–∞" and message.chat.id in user_states)
async def clear_cart(message: types.Message):
    user_states[message.chat.id]["cart"] = {}
    await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ –∫–æ—Ä–∑–∏–Ω—É.", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
@dp.message_handler(lambda message: message.text == "–ù–µ—Ç" and message.chat.id in user_states)
async def cancel_clear_cart(message: types.Message):
    await message.answer("–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
@dp.message_handler(lambda message: message.text == "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑" and message.chat.id in user_states)
async def initiate_order(message: types.Message):
    cart = user_states[message.chat.id]["cart"]
    if not cart:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∫–æ—Ä–∑–∏–Ω—É, –ø—Ä–µ–∂–¥–µ —á–µ–º –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑.", reply_markup=main_keyboard)
        return

    user_states[message.chat.id]["step"] = 1
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å (–ø—Ä–∏–º–µ—Ä: –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, —É–ª 8 –º–∞—Ä—Ç–∞ 12, 2 –ø–æ–¥—ä–µ–∑–¥, –∫–≤ 48):", reply_markup=back_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
@dp.message_handler(lambda message: message.chat.id in user_states and user_states[message.chat.id]["step"] == 1)
async def get_address(message: types.Message):
    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:", reply_markup=menu_keyboard)
        user_states[message.chat.id]["step"] = 0
        return
    
    address = message.text
    if not is_valid_address(address):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ (–ø—Ä–∏–º–µ—Ä: –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, —É–ª 8 –º–∞—Ä—Ç–∞ 12, 2 –ø–æ–¥—ä–µ–∑–¥, –∫–≤ 48):")
        return

    user_states[message.chat.id]["address"] = address
    user_states[message.chat.id]["step"] = 2
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø—Ä–∏–º–µ—Ä: +79012345678 –∏–ª–∏ 89012345678):", reply_markup=back_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message_handler(lambda message: message.chat.id in user_states and user_states[message.chat.id]["step"] == 2)
async def get_phone(message: types.Message):
    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å (–ø—Ä–∏–º–µ—Ä: –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, —É–ª 8 –º–∞—Ä—Ç–∞ 12, 2 –ø–æ–¥—ä–µ–∑–¥, –∫–≤ 48):", reply_markup=back_keyboard)
        user_states[message.chat.id]["step"] = 1
        return

    phone = message.text
    if not is_valid_phone(phone):
        await message.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø—Ä–∏–º–µ—Ä: +79012345678 –∏–ª–∏ 89012345678):", reply_markup=back_keyboard)
        return

    user_states[message.chat.id]["phone"] = phone
    user_states[message.chat.id]["step"] = 3
    await message.answer("–ñ–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–∫–∞–∑—É?", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"), KeyboardButton("–ù–∞–∑–∞–¥")))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
@dp.message_handler(lambda message: message.chat.id in user_states and user_states[message.chat.id]["step"] == 3)
async def get_comment(message: types.Message):
    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø—Ä–∏–º–µ—Ä: +79012345678 –∏–ª–∏ 89012345678):", reply_markup=back_keyboard)
        user_states[message.chat.id]["step"] = 2
        return

    if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        user_states[message.chat.id]["comment"] = None
    else:
        user_states[message.chat.id]["comment"] = message.text

    user_states[message.chat.id]["step"] = 4
    address = user_states[message.chat.id]["address"]
    phone = user_states[message.chat.id]["phone"]
    comment = user_states[message.chat.id]["comment"]
    cart_message = format_cart(user_states[message.chat.id]["cart"])
    
    order_message = f"–í–∞—à –∑–∞–∫–∞–∑:\n{cart_message}\n–ê–¥—Ä–µ—Å: {address}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n"
    if comment:
        order_message += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"
    
    order_message += "\n–•–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å?"
    
    await message.answer(
        order_message,
        reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å"), KeyboardButton("–û—Ç–º–µ–Ω–∞"), KeyboardButton("–ù–∞–∑–∞–¥"))
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
def format_cart(cart):
    cart_message = ""
    for product, quantity in cart.items():
        price = PRICES[product].amount / 100  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ä—É–±–ª—è–º
        cart_message += f"{product} - {quantity} —à—Ç. –ø–æ {price} —Ä—É–±–ª–µ–π\n"
    return cart_message

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@dp.message_handler(lambda message: message.chat.id in user_states and user_states[message.chat.id]["step"] == 4)
async def confirm_order(message: types.Message):
    if message.text == "–û–ø–ª–∞—Ç–∏—Ç—å":
        await initiate_payment(message)
    elif message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–ñ–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–∫–∞–∑—É?", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"), KeyboardButton("–ù–∞–∑–∞–¥")))
        user_states[message.chat.id]["step"] = 3
    elif message.text == "–û—Ç–º–µ–Ω–∞":
        await cancel_order(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
@dp.message_handler(lambda message: message.text == "–û—Ç–º–µ–Ω–∞" and message.chat.id in user_states)
async def cancel_order(message: types.Message):
    chat_id = message.chat.id
    if chat_id in user_states:
        del user_states[chat_id]
    await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã
@dp.message_handler(lambda message: message.text == "–û–ø–ª–∞—Ç–∏—Ç—å" and message.chat.id in user_states and user_states[message.chat.id]["step"] == 4)
async def initiate_payment(message: types.Message):
    cart = user_states[message.chat.id]["cart"]
    total_amount = sum(PRICES[product].amount * quantity for product, quantity in cart.items())
    if total_amount == 0:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    await buy_pizza(message.chat.id, types.LabeledPrice(label="–í–∞—à –∑–∞–∫–∞–∑", amount=total_amount))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É
async def buy_pizza(chat_id, price):
    try:
        bot_message = await bot.send_invoice(chat_id, 
                            title="–í–∞—à –∑–∞–∫–∞–∑",
                            description="–û–ø–ª–∞—Ç–∞ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑.",
                            provider_token=config.PAYMENTS_TOKEN,
                            currency="rub",
                            is_flexible=False,
                            prices=[price],
                            start_parameter="pizza-order",
                            payload="pizza-order-payload")
        
        if chat_id not in messages_to_delete:
            messages_to_delete[chat_id] = []   
        messages_to_delete[chat_id].append(bot_message.message_id)

        await bot.send_message(chat_id, "–í—ã —Å–Ω–æ–≤–∞ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í –ø–æ–ª–µ '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞' –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞", reply_markup=back_keyboard)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {e}")
        await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã
@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    logging.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –≤—ã–∑–≤–∞–Ω.")
    
    developer_message = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑:\n"
        f"–°—É–º–º–∞: {message.successful_payment.total_amount / 100} —Ä—É–±–ª–µ–π\n"
        f"–ó–∞–∫–∞–∑:\n{format_cart(user_states[message.chat.id]['cart'])}\n"
        f"–ê–¥—Ä–µ—Å: {user_states[message.chat.id]['address']}\n"
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_states[message.chat.id]['phone']}\n"
    )
    
    if user_states[message.chat.id]["comment"]:
        developer_message += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {user_states[message.chat.id]['comment']}\n"
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑! üéâ\n–í–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å.")
    
    logging.info(developer_message)

    try:
        await bot.send_message(config.DEVELOPER_CHAT_ID, developer_message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: {e}")
    
    if message.chat.id in messages_to_delete:
        for msg_id in messages_to_delete[message.chat.id]:
            try:
                await bot.delete_message(message.chat.id, msg_id)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        del messages_to_delete[message.chat.id]
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    user_states[message.chat.id]["step"] = 0  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    user_states[message.chat.id]["cart"] = {}  # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    user_states[message.chat.id]["comment"] = None  # –û—á–∏—â–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∑–∞–∫–∞–∑ –≤–æ –≤–∫–ª–∞–¥–∫–µ '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞'.", reply_markup=main_keyboard)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
